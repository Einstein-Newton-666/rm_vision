// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Recieve.proto

#include "Recieve.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace device_to_host {
PROTOBUF_CONSTEXPR Frame::Frame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_pitch__)*/0
  , /*decltype(_impl_.current_yaw__)*/0
  , /*decltype(_impl_.current_roll__)*/0
  , /*decltype(_impl_.current_color__)*/0
  , /*decltype(_impl_.bullet_speed__)*/0
  , /*decltype(_impl_.mode__)*/0
  , /*decltype(_impl_.enemies_blood_0_)*/0
  , /*decltype(_impl_.enemies_blood_1_)*/0
  , /*decltype(_impl_.enemies_blood_2_)*/0
  , /*decltype(_impl_.enemies_blood_3_)*/0
  , /*decltype(_impl_.enemies_blood_4_)*/0
  , /*decltype(_impl_.enemies_blood_5_)*/0
  , /*decltype(_impl_.enemies_outpost_)*/0
  , /*decltype(_impl_.ifattackengineer_)*/0
  , /*decltype(_impl_.reset_tracker_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameDefaultTypeInternal _Frame_default_instance_;
}  // namespace device_to_host
static ::_pb::Metadata file_level_metadata_Recieve_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Recieve_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Recieve_2eproto = nullptr;

const uint32_t TableStruct_Recieve_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.current_pitch__),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.current_yaw__),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.current_roll__),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.current_color__),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.bullet_speed__),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.mode__),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.enemies_blood_0_),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.enemies_blood_1_),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.enemies_blood_2_),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.enemies_blood_3_),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.enemies_blood_4_),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.enemies_blood_5_),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.enemies_outpost_),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.ifattackengineer_),
  PROTOBUF_FIELD_OFFSET(::device_to_host::Frame, _impl_.reset_tracker_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::device_to_host::Frame)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::device_to_host::_Frame_default_instance_._instance,
};

const char descriptor_table_protodef_Recieve_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rRecieve.proto\022\016device_to_host\"\352\002\n\005Fram"
  "e\022\026\n\016Current_Pitch_\030\001 \001(\002\022\024\n\014Current_Yaw"
  "_\030\002 \001(\002\022\025\n\rCurrent_Roll_\030\003 \001(\002\022\026\n\016Curren"
  "t_Color_\030\004 \001(\005\022\025\n\rBullet_Speed_\030\005 \001(\002\022\r\n"
  "\005Mode_\030\006 \001(\005\022\027\n\017Enemies_Blood_0\030\007 \001(\005\022\027\n"
  "\017Enemies_Blood_1\030\010 \001(\005\022\027\n\017Enemies_Blood_"
  "2\030\t \001(\005\022\027\n\017Enemies_Blood_3\030\n \001(\005\022\027\n\017Enem"
  "ies_Blood_4\030\013 \001(\005\022\027\n\017Enemies_Blood_5\030\014 \001"
  "(\005\022\027\n\017Enemies_outpost\030\r \001(\005\022\030\n\020IfAttackE"
  "ngineer\030\016 \001(\005\022\025\n\rReset_Tracker\030\017 \001(\005b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_Recieve_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Recieve_2eproto = {
    false, false, 404, descriptor_table_protodef_Recieve_2eproto,
    "Recieve.proto",
    &descriptor_table_Recieve_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_Recieve_2eproto::offsets,
    file_level_metadata_Recieve_2eproto, file_level_enum_descriptors_Recieve_2eproto,
    file_level_service_descriptors_Recieve_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Recieve_2eproto_getter() {
  return &descriptor_table_Recieve_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Recieve_2eproto(&descriptor_table_Recieve_2eproto);
namespace device_to_host {

// ===================================================================

class Frame::_Internal {
 public:
};

Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:device_to_host.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Frame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_pitch__){}
    , decltype(_impl_.current_yaw__){}
    , decltype(_impl_.current_roll__){}
    , decltype(_impl_.current_color__){}
    , decltype(_impl_.bullet_speed__){}
    , decltype(_impl_.mode__){}
    , decltype(_impl_.enemies_blood_0_){}
    , decltype(_impl_.enemies_blood_1_){}
    , decltype(_impl_.enemies_blood_2_){}
    , decltype(_impl_.enemies_blood_3_){}
    , decltype(_impl_.enemies_blood_4_){}
    , decltype(_impl_.enemies_blood_5_){}
    , decltype(_impl_.enemies_outpost_){}
    , decltype(_impl_.ifattackengineer_){}
    , decltype(_impl_.reset_tracker_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.current_pitch__, &from._impl_.current_pitch__,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reset_tracker_) -
    reinterpret_cast<char*>(&_impl_.current_pitch__)) + sizeof(_impl_.reset_tracker_));
  // @@protoc_insertion_point(copy_constructor:device_to_host.Frame)
}

inline void Frame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_pitch__){0}
    , decltype(_impl_.current_yaw__){0}
    , decltype(_impl_.current_roll__){0}
    , decltype(_impl_.current_color__){0}
    , decltype(_impl_.bullet_speed__){0}
    , decltype(_impl_.mode__){0}
    , decltype(_impl_.enemies_blood_0_){0}
    , decltype(_impl_.enemies_blood_1_){0}
    , decltype(_impl_.enemies_blood_2_){0}
    , decltype(_impl_.enemies_blood_3_){0}
    , decltype(_impl_.enemies_blood_4_){0}
    , decltype(_impl_.enemies_blood_5_){0}
    , decltype(_impl_.enemies_outpost_){0}
    , decltype(_impl_.ifattackengineer_){0}
    , decltype(_impl_.reset_tracker_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:device_to_host.Frame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Frame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:device_to_host.Frame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.current_pitch__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reset_tracker_) -
      reinterpret_cast<char*>(&_impl_.current_pitch__)) + sizeof(_impl_.reset_tracker_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float Current_Pitch_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.current_pitch__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Current_Yaw_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.current_yaw__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Current_Roll_ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.current_roll__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 Current_Color_ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.current_color__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float Bullet_Speed_ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.bullet_speed__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 Mode_ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mode__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Enemies_Blood_0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.enemies_blood_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Enemies_Blood_1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.enemies_blood_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Enemies_Blood_2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.enemies_blood_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Enemies_Blood_3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.enemies_blood_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Enemies_Blood_4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.enemies_blood_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Enemies_Blood_5 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.enemies_blood_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Enemies_outpost = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.enemies_outpost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 IfAttackEngineer = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.ifattackengineer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Reset_Tracker = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.reset_tracker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:device_to_host.Frame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float Current_Pitch_ = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_pitch_ = this->_internal_current_pitch_();
  uint32_t raw_current_pitch_;
  memcpy(&raw_current_pitch_, &tmp_current_pitch_, sizeof(tmp_current_pitch_));
  if (raw_current_pitch_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_current_pitch_(), target);
  }

  // float Current_Yaw_ = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_yaw_ = this->_internal_current_yaw_();
  uint32_t raw_current_yaw_;
  memcpy(&raw_current_yaw_, &tmp_current_yaw_, sizeof(tmp_current_yaw_));
  if (raw_current_yaw_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_current_yaw_(), target);
  }

  // float Current_Roll_ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_roll_ = this->_internal_current_roll_();
  uint32_t raw_current_roll_;
  memcpy(&raw_current_roll_, &tmp_current_roll_, sizeof(tmp_current_roll_));
  if (raw_current_roll_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_current_roll_(), target);
  }

  // int32 Current_Color_ = 4;
  if (this->_internal_current_color_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_current_color_(), target);
  }

  // float Bullet_Speed_ = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bullet_speed_ = this->_internal_bullet_speed_();
  uint32_t raw_bullet_speed_;
  memcpy(&raw_bullet_speed_, &tmp_bullet_speed_, sizeof(tmp_bullet_speed_));
  if (raw_bullet_speed_ != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_bullet_speed_(), target);
  }

  // int32 Mode_ = 6;
  if (this->_internal_mode_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_mode_(), target);
  }

  // int32 Enemies_Blood_0 = 7;
  if (this->_internal_enemies_blood_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_enemies_blood_0(), target);
  }

  // int32 Enemies_Blood_1 = 8;
  if (this->_internal_enemies_blood_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_enemies_blood_1(), target);
  }

  // int32 Enemies_Blood_2 = 9;
  if (this->_internal_enemies_blood_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_enemies_blood_2(), target);
  }

  // int32 Enemies_Blood_3 = 10;
  if (this->_internal_enemies_blood_3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_enemies_blood_3(), target);
  }

  // int32 Enemies_Blood_4 = 11;
  if (this->_internal_enemies_blood_4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_enemies_blood_4(), target);
  }

  // int32 Enemies_Blood_5 = 12;
  if (this->_internal_enemies_blood_5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_enemies_blood_5(), target);
  }

  // int32 Enemies_outpost = 13;
  if (this->_internal_enemies_outpost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_enemies_outpost(), target);
  }

  // int32 IfAttackEngineer = 14;
  if (this->_internal_ifattackengineer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_ifattackengineer(), target);
  }

  // int32 Reset_Tracker = 15;
  if (this->_internal_reset_tracker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_reset_tracker(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device_to_host.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device_to_host.Frame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float Current_Pitch_ = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_pitch_ = this->_internal_current_pitch_();
  uint32_t raw_current_pitch_;
  memcpy(&raw_current_pitch_, &tmp_current_pitch_, sizeof(tmp_current_pitch_));
  if (raw_current_pitch_ != 0) {
    total_size += 1 + 4;
  }

  // float Current_Yaw_ = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_yaw_ = this->_internal_current_yaw_();
  uint32_t raw_current_yaw_;
  memcpy(&raw_current_yaw_, &tmp_current_yaw_, sizeof(tmp_current_yaw_));
  if (raw_current_yaw_ != 0) {
    total_size += 1 + 4;
  }

  // float Current_Roll_ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_roll_ = this->_internal_current_roll_();
  uint32_t raw_current_roll_;
  memcpy(&raw_current_roll_, &tmp_current_roll_, sizeof(tmp_current_roll_));
  if (raw_current_roll_ != 0) {
    total_size += 1 + 4;
  }

  // int32 Current_Color_ = 4;
  if (this->_internal_current_color_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_color_());
  }

  // float Bullet_Speed_ = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bullet_speed_ = this->_internal_bullet_speed_();
  uint32_t raw_bullet_speed_;
  memcpy(&raw_bullet_speed_, &tmp_bullet_speed_, sizeof(tmp_bullet_speed_));
  if (raw_bullet_speed_ != 0) {
    total_size += 1 + 4;
  }

  // int32 Mode_ = 6;
  if (this->_internal_mode_() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mode_());
  }

  // int32 Enemies_Blood_0 = 7;
  if (this->_internal_enemies_blood_0() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemies_blood_0());
  }

  // int32 Enemies_Blood_1 = 8;
  if (this->_internal_enemies_blood_1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemies_blood_1());
  }

  // int32 Enemies_Blood_2 = 9;
  if (this->_internal_enemies_blood_2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemies_blood_2());
  }

  // int32 Enemies_Blood_3 = 10;
  if (this->_internal_enemies_blood_3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemies_blood_3());
  }

  // int32 Enemies_Blood_4 = 11;
  if (this->_internal_enemies_blood_4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemies_blood_4());
  }

  // int32 Enemies_Blood_5 = 12;
  if (this->_internal_enemies_blood_5() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemies_blood_5());
  }

  // int32 Enemies_outpost = 13;
  if (this->_internal_enemies_outpost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemies_outpost());
  }

  // int32 IfAttackEngineer = 14;
  if (this->_internal_ifattackengineer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ifattackengineer());
  }

  // int32 Reset_Tracker = 15;
  if (this->_internal_reset_tracker() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reset_tracker());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }


void Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Frame*>(&to_msg);
  auto& from = static_cast<const Frame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:device_to_host.Frame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_pitch_ = from._internal_current_pitch_();
  uint32_t raw_current_pitch_;
  memcpy(&raw_current_pitch_, &tmp_current_pitch_, sizeof(tmp_current_pitch_));
  if (raw_current_pitch_ != 0) {
    _this->_internal_set_current_pitch_(from._internal_current_pitch_());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_yaw_ = from._internal_current_yaw_();
  uint32_t raw_current_yaw_;
  memcpy(&raw_current_yaw_, &tmp_current_yaw_, sizeof(tmp_current_yaw_));
  if (raw_current_yaw_ != 0) {
    _this->_internal_set_current_yaw_(from._internal_current_yaw_());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_current_roll_ = from._internal_current_roll_();
  uint32_t raw_current_roll_;
  memcpy(&raw_current_roll_, &tmp_current_roll_, sizeof(tmp_current_roll_));
  if (raw_current_roll_ != 0) {
    _this->_internal_set_current_roll_(from._internal_current_roll_());
  }
  if (from._internal_current_color_() != 0) {
    _this->_internal_set_current_color_(from._internal_current_color_());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bullet_speed_ = from._internal_bullet_speed_();
  uint32_t raw_bullet_speed_;
  memcpy(&raw_bullet_speed_, &tmp_bullet_speed_, sizeof(tmp_bullet_speed_));
  if (raw_bullet_speed_ != 0) {
    _this->_internal_set_bullet_speed_(from._internal_bullet_speed_());
  }
  if (from._internal_mode_() != 0) {
    _this->_internal_set_mode_(from._internal_mode_());
  }
  if (from._internal_enemies_blood_0() != 0) {
    _this->_internal_set_enemies_blood_0(from._internal_enemies_blood_0());
  }
  if (from._internal_enemies_blood_1() != 0) {
    _this->_internal_set_enemies_blood_1(from._internal_enemies_blood_1());
  }
  if (from._internal_enemies_blood_2() != 0) {
    _this->_internal_set_enemies_blood_2(from._internal_enemies_blood_2());
  }
  if (from._internal_enemies_blood_3() != 0) {
    _this->_internal_set_enemies_blood_3(from._internal_enemies_blood_3());
  }
  if (from._internal_enemies_blood_4() != 0) {
    _this->_internal_set_enemies_blood_4(from._internal_enemies_blood_4());
  }
  if (from._internal_enemies_blood_5() != 0) {
    _this->_internal_set_enemies_blood_5(from._internal_enemies_blood_5());
  }
  if (from._internal_enemies_outpost() != 0) {
    _this->_internal_set_enemies_outpost(from._internal_enemies_outpost());
  }
  if (from._internal_ifattackengineer() != 0) {
    _this->_internal_set_ifattackengineer(from._internal_ifattackengineer());
  }
  if (from._internal_reset_tracker() != 0) {
    _this->_internal_set_reset_tracker(from._internal_reset_tracker());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device_to_host.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, _impl_.reset_tracker_)
      + sizeof(Frame::_impl_.reset_tracker_)
      - PROTOBUF_FIELD_OFFSET(Frame, _impl_.current_pitch__)>(
          reinterpret_cast<char*>(&_impl_.current_pitch__),
          reinterpret_cast<char*>(&other->_impl_.current_pitch__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Recieve_2eproto_getter, &descriptor_table_Recieve_2eproto_once,
      file_level_metadata_Recieve_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace device_to_host
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::device_to_host::Frame*
Arena::CreateMaybeMessage< ::device_to_host::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::device_to_host::Frame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
