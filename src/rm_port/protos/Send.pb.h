// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Send.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Send_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Send_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Send_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Send_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Send_2eproto;
namespace host_to_device {
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
}  // namespace host_to_device
PROTOBUF_NAMESPACE_OPEN
template<> ::host_to_device::Frame* Arena::CreateMaybeMessage<::host_to_device::Frame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace host_to_device {

// ===================================================================

class Frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:host_to_device.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  ~Frame() override;
  explicit PROTOBUF_CONSTEXPR Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Frame& from) {
    Frame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "host_to_device.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPitchFieldNumber = 1,
    kTargetYawFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kYawSpeedFieldNumber = 5,
    kPitchSpeedFieldNumber = 6,
  };
  // float Target_Pitch_ = 1;
  void clear_target_pitch_();
  float target_pitch_() const;
  void set_target_pitch_(float value);
  private:
  float _internal_target_pitch_() const;
  void _internal_set_target_pitch_(float value);
  public:

  // float Target_Yaw_ = 2;
  void clear_target_yaw_();
  float target_yaw_() const;
  void set_target_yaw_(float value);
  private:
  float _internal_target_yaw_() const;
  void _internal_set_target_yaw_(float value);
  public:

  // int32 X_ = 3;
  void clear_x_();
  int32_t x_() const;
  void set_x_(int32_t value);
  private:
  int32_t _internal_x_() const;
  void _internal_set_x_(int32_t value);
  public:

  // int32 Y_ = 4;
  void clear_y_();
  int32_t y_() const;
  void set_y_(int32_t value);
  private:
  int32_t _internal_y_() const;
  void _internal_set_y_(int32_t value);
  public:

  // float yaw_speed = 5;
  void clear_yaw_speed();
  float yaw_speed() const;
  void set_yaw_speed(float value);
  private:
  float _internal_yaw_speed() const;
  void _internal_set_yaw_speed(float value);
  public:

  // float pitch_speed = 6;
  void clear_pitch_speed();
  float pitch_speed() const;
  void set_pitch_speed(float value);
  private:
  float _internal_pitch_speed() const;
  void _internal_set_pitch_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:host_to_device.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float target_pitch__;
    float target_yaw__;
    int32_t x__;
    int32_t y__;
    float yaw_speed_;
    float pitch_speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Send_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frame

// float Target_Pitch_ = 1;
inline void Frame::clear_target_pitch_() {
  _impl_.target_pitch__ = 0;
}
inline float Frame::_internal_target_pitch_() const {
  return _impl_.target_pitch__;
}
inline float Frame::target_pitch_() const {
  // @@protoc_insertion_point(field_get:host_to_device.Frame.Target_Pitch_)
  return _internal_target_pitch_();
}
inline void Frame::_internal_set_target_pitch_(float value) {
  
  _impl_.target_pitch__ = value;
}
inline void Frame::set_target_pitch_(float value) {
  _internal_set_target_pitch_(value);
  // @@protoc_insertion_point(field_set:host_to_device.Frame.Target_Pitch_)
}

// float Target_Yaw_ = 2;
inline void Frame::clear_target_yaw_() {
  _impl_.target_yaw__ = 0;
}
inline float Frame::_internal_target_yaw_() const {
  return _impl_.target_yaw__;
}
inline float Frame::target_yaw_() const {
  // @@protoc_insertion_point(field_get:host_to_device.Frame.Target_Yaw_)
  return _internal_target_yaw_();
}
inline void Frame::_internal_set_target_yaw_(float value) {
  
  _impl_.target_yaw__ = value;
}
inline void Frame::set_target_yaw_(float value) {
  _internal_set_target_yaw_(value);
  // @@protoc_insertion_point(field_set:host_to_device.Frame.Target_Yaw_)
}

// int32 X_ = 3;
inline void Frame::clear_x_() {
  _impl_.x__ = 0;
}
inline int32_t Frame::_internal_x_() const {
  return _impl_.x__;
}
inline int32_t Frame::x_() const {
  // @@protoc_insertion_point(field_get:host_to_device.Frame.X_)
  return _internal_x_();
}
inline void Frame::_internal_set_x_(int32_t value) {
  
  _impl_.x__ = value;
}
inline void Frame::set_x_(int32_t value) {
  _internal_set_x_(value);
  // @@protoc_insertion_point(field_set:host_to_device.Frame.X_)
}

// int32 Y_ = 4;
inline void Frame::clear_y_() {
  _impl_.y__ = 0;
}
inline int32_t Frame::_internal_y_() const {
  return _impl_.y__;
}
inline int32_t Frame::y_() const {
  // @@protoc_insertion_point(field_get:host_to_device.Frame.Y_)
  return _internal_y_();
}
inline void Frame::_internal_set_y_(int32_t value) {
  
  _impl_.y__ = value;
}
inline void Frame::set_y_(int32_t value) {
  _internal_set_y_(value);
  // @@protoc_insertion_point(field_set:host_to_device.Frame.Y_)
}

// float yaw_speed = 5;
inline void Frame::clear_yaw_speed() {
  _impl_.yaw_speed_ = 0;
}
inline float Frame::_internal_yaw_speed() const {
  return _impl_.yaw_speed_;
}
inline float Frame::yaw_speed() const {
  // @@protoc_insertion_point(field_get:host_to_device.Frame.yaw_speed)
  return _internal_yaw_speed();
}
inline void Frame::_internal_set_yaw_speed(float value) {
  
  _impl_.yaw_speed_ = value;
}
inline void Frame::set_yaw_speed(float value) {
  _internal_set_yaw_speed(value);
  // @@protoc_insertion_point(field_set:host_to_device.Frame.yaw_speed)
}

// float pitch_speed = 6;
inline void Frame::clear_pitch_speed() {
  _impl_.pitch_speed_ = 0;
}
inline float Frame::_internal_pitch_speed() const {
  return _impl_.pitch_speed_;
}
inline float Frame::pitch_speed() const {
  // @@protoc_insertion_point(field_get:host_to_device.Frame.pitch_speed)
  return _internal_pitch_speed();
}
inline void Frame::_internal_set_pitch_speed(float value) {
  
  _impl_.pitch_speed_ = value;
}
inline void Frame::set_pitch_speed(float value) {
  _internal_set_pitch_speed(value);
  // @@protoc_insertion_point(field_set:host_to_device.Frame.pitch_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace host_to_device

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Send_2eproto
